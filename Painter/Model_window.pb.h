// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Model_window.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Model_5fwindow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Model_5fwindow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Model_5fwindow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Model_5fwindow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Model_5fwindow_2eproto;
namespace mw {
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class Models;
class ModelsDefaultTypeInternal;
extern ModelsDefaultTypeInternal _Models_default_instance_;
class Num;
class NumDefaultTypeInternal;
extern NumDefaultTypeInternal _Num_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Points;
class PointsDefaultTypeInternal;
extern PointsDefaultTypeInternal _Points_default_instance_;
class Window;
class WindowDefaultTypeInternal;
extern WindowDefaultTypeInternal _Window_default_instance_;
}  // namespace mw
PROTOBUF_NAMESPACE_OPEN
template<> ::mw::Model* Arena::CreateMaybeMessage<::mw::Model>(Arena*);
template<> ::mw::Models* Arena::CreateMaybeMessage<::mw::Models>(Arena*);
template<> ::mw::Num* Arena::CreateMaybeMessage<::mw::Num>(Arena*);
template<> ::mw::Point* Arena::CreateMaybeMessage<::mw::Point>(Arena*);
template<> ::mw::Points* Arena::CreateMaybeMessage<::mw::Points>(Arena*);
template<> ::mw::Window* Arena::CreateMaybeMessage<::mw::Window>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mw {

enum Window_Shapes : int {
  Window_Shapes_line = 0,
  Window_Shapes_rect = 1,
  Window_Shapes_circle = 2,
  Window_Shapes_polygon = 3,
  Window_Shapes_Window_Shapes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Window_Shapes_Window_Shapes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Window_Shapes_IsValid(int value);
constexpr Window_Shapes Window_Shapes_Shapes_MIN = Window_Shapes_line;
constexpr Window_Shapes Window_Shapes_Shapes_MAX = Window_Shapes_polygon;
constexpr int Window_Shapes_Shapes_ARRAYSIZE = Window_Shapes_Shapes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Window_Shapes_descriptor();
template<typename T>
inline const std::string& Window_Shapes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Window_Shapes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Window_Shapes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Window_Shapes_descriptor(), enum_t_value);
}
inline bool Window_Shapes_Parse(
    const std::string& name, Window_Shapes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Window_Shapes>(
    Window_Shapes_descriptor(), name, value);
}
// ===================================================================

class Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mw.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mw.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Model_5fwindow_2eproto);
    return ::descriptor_table_Model_5fwindow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mw.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Model_5fwindow_2eproto;
};
// -------------------------------------------------------------------

class Points :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mw.Points) */ {
 public:
  Points();
  virtual ~Points();

  Points(const Points& from);
  Points(Points&& from) noexcept
    : Points() {
    *this = ::std::move(from);
  }

  inline Points& operator=(const Points& from) {
    CopyFrom(from);
    return *this;
  }
  inline Points& operator=(Points&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Points& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Points* internal_default_instance() {
    return reinterpret_cast<const Points*>(
               &_Points_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Points& a, Points& b) {
    a.Swap(&b);
  }
  inline void Swap(Points* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Points* New() const final {
    return CreateMaybeMessage<Points>(nullptr);
  }

  Points* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Points>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Points& from);
  void MergeFrom(const Points& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Points* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mw.Points";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Model_5fwindow_2eproto);
    return ::descriptor_table_Model_5fwindow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .mw.Point points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::mw::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Point >*
      mutable_points();
  private:
  const ::mw::Point& _internal_points(int index) const;
  ::mw::Point* _internal_add_points();
  public:
  const ::mw::Point& points(int index) const;
  ::mw::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Point >&
      points() const;

  // @@protoc_insertion_point(class_scope:mw.Points)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Point > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Model_5fwindow_2eproto;
};
// -------------------------------------------------------------------

class Model :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mw.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model& operator=(Model&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }
  inline void Swap(Model* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const final {
    return CreateMaybeMessage<Model>(nullptr);
  }

  Model* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mw.Model";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Model_5fwindow_2eproto);
    return ::descriptor_table_Model_5fwindow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 5,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
    kPointsLimitFieldNumber = 6,
    kIsCreatedFieldNumber = 7,
    kCanDrawFieldNumber = 8,
    kDragResizeFieldNumber = 9,
    kIsFocusedFieldNumber = 13,
    kDragIdxFieldNumber = 10,
    kLineColorFieldNumber = 11,
    kLineStyleFieldNumber = 12,
    kShapeIdFieldNumber = 14,
  };
  // .mw.Points points = 5;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  const ::mw::Points& points() const;
  ::mw::Points* release_points();
  ::mw::Points* mutable_points();
  void set_allocated_points(::mw::Points* points);
  private:
  const ::mw::Points& _internal_points() const;
  ::mw::Points* _internal_mutable_points();
  public:

  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 w = 3;
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 h = 4;
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 points_limit = 6;
  void clear_points_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 points_limit() const;
  void set_points_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points_limit() const;
  void _internal_set_points_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_created = 7;
  void clear_is_created();
  bool is_created() const;
  void set_is_created(bool value);
  private:
  bool _internal_is_created() const;
  void _internal_set_is_created(bool value);
  public:

  // bool can_draw = 8;
  void clear_can_draw();
  bool can_draw() const;
  void set_can_draw(bool value);
  private:
  bool _internal_can_draw() const;
  void _internal_set_can_draw(bool value);
  public:

  // bool drag_resize = 9;
  void clear_drag_resize();
  bool drag_resize() const;
  void set_drag_resize(bool value);
  private:
  bool _internal_drag_resize() const;
  void _internal_set_drag_resize(bool value);
  public:

  // bool is_focused = 13;
  void clear_is_focused();
  bool is_focused() const;
  void set_is_focused(bool value);
  private:
  bool _internal_is_focused() const;
  void _internal_set_is_focused(bool value);
  public:

  // int32 drag_idx = 10;
  void clear_drag_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 drag_idx() const;
  void set_drag_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drag_idx() const;
  void _internal_set_drag_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 line_color = 11;
  void clear_line_color();
  ::PROTOBUF_NAMESPACE_ID::int32 line_color() const;
  void set_line_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line_color() const;
  void _internal_set_line_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 line_style = 12;
  void clear_line_style();
  ::PROTOBUF_NAMESPACE_ID::int32 line_style() const;
  void set_line_style(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line_style() const;
  void _internal_set_line_style(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 shape_id = 14;
  void clear_shape_id();
  ::PROTOBUF_NAMESPACE_ID::int32 shape_id() const;
  void set_shape_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape_id() const;
  void _internal_set_shape_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mw.Model)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mw::Points* points_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_limit_;
  bool is_created_;
  bool can_draw_;
  bool drag_resize_;
  bool is_focused_;
  ::PROTOBUF_NAMESPACE_ID::int32 drag_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_color_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_style_;
  ::PROTOBUF_NAMESPACE_ID::int32 shape_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Model_5fwindow_2eproto;
};
// -------------------------------------------------------------------

class Models :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mw.Models) */ {
 public:
  Models();
  virtual ~Models();

  Models(const Models& from);
  Models(Models&& from) noexcept
    : Models() {
    *this = ::std::move(from);
  }

  inline Models& operator=(const Models& from) {
    CopyFrom(from);
    return *this;
  }
  inline Models& operator=(Models&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Models& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Models* internal_default_instance() {
    return reinterpret_cast<const Models*>(
               &_Models_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Models& a, Models& b) {
    a.Swap(&b);
  }
  inline void Swap(Models* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Models* New() const final {
    return CreateMaybeMessage<Models>(nullptr);
  }

  Models* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Models>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Models& from);
  void MergeFrom(const Models& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Models* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mw.Models";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Model_5fwindow_2eproto);
    return ::descriptor_table_Model_5fwindow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 1,
  };
  // repeated .mw.Model models = 1;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::mw::Model* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Model >*
      mutable_models();
  private:
  const ::mw::Model& _internal_models(int index) const;
  ::mw::Model* _internal_add_models();
  public:
  const ::mw::Model& models(int index) const;
  ::mw::Model* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Model >&
      models() const;

  // @@protoc_insertion_point(class_scope:mw.Models)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Model > models_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Model_5fwindow_2eproto;
};
// -------------------------------------------------------------------

class Num :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mw.Num) */ {
 public:
  Num();
  virtual ~Num();

  Num(const Num& from);
  Num(Num&& from) noexcept
    : Num() {
    *this = ::std::move(from);
  }

  inline Num& operator=(const Num& from) {
    CopyFrom(from);
    return *this;
  }
  inline Num& operator=(Num&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Num& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Num* internal_default_instance() {
    return reinterpret_cast<const Num*>(
               &_Num_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Num& a, Num& b) {
    a.Swap(&b);
  }
  inline void Swap(Num* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Num* New() const final {
    return CreateMaybeMessage<Num>(nullptr);
  }

  Num* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Num>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Num& from);
  void MergeFrom(const Num& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Num* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mw.Num";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Model_5fwindow_2eproto);
    return ::descriptor_table_Model_5fwindow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // int32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mw.Num)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Model_5fwindow_2eproto;
};
// -------------------------------------------------------------------

class Window :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mw.Window) */ {
 public:
  Window();
  virtual ~Window();

  Window(const Window& from);
  Window(Window&& from) noexcept
    : Window() {
    *this = ::std::move(from);
  }

  inline Window& operator=(const Window& from) {
    CopyFrom(from);
    return *this;
  }
  inline Window& operator=(Window&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Window& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Window* internal_default_instance() {
    return reinterpret_cast<const Window*>(
               &_Window_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Window& a, Window& b) {
    a.Swap(&b);
  }
  inline void Swap(Window* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Window* New() const final {
    return CreateMaybeMessage<Window>(nullptr);
  }

  Window* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Window>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Window& from);
  void MergeFrom(const Window& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Window* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mw.Window";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Model_5fwindow_2eproto);
    return ::descriptor_table_Model_5fwindow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Window_Shapes Shapes;
  static constexpr Shapes line =
    Window_Shapes_line;
  static constexpr Shapes rect =
    Window_Shapes_rect;
  static constexpr Shapes circle =
    Window_Shapes_circle;
  static constexpr Shapes polygon =
    Window_Shapes_polygon;
  static inline bool Shapes_IsValid(int value) {
    return Window_Shapes_IsValid(value);
  }
  static constexpr Shapes Shapes_MIN =
    Window_Shapes_Shapes_MIN;
  static constexpr Shapes Shapes_MAX =
    Window_Shapes_Shapes_MAX;
  static constexpr int Shapes_ARRAYSIZE =
    Window_Shapes_Shapes_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Shapes_descriptor() {
    return Window_Shapes_descriptor();
  }
  template<typename T>
  static inline const std::string& Shapes_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Shapes>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Shapes_Name.");
    return Window_Shapes_Name(enum_t_value);
  }
  static inline bool Shapes_Parse(const std::string& name,
      Shapes* value) {
    return Window_Shapes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNumsFieldNumber = 3,
    kSmFieldNumber = 1,
    kRmFieldNumber = 2,
  };
  // repeated .mw.Num nums = 3;
  int nums_size() const;
  private:
  int _internal_nums_size() const;
  public:
  void clear_nums();
  ::mw::Num* mutable_nums(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Num >*
      mutable_nums();
  private:
  const ::mw::Num& _internal_nums(int index) const;
  ::mw::Num* _internal_add_nums();
  public:
  const ::mw::Num& nums(int index) const;
  ::mw::Num* add_nums();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Num >&
      nums() const;

  // .mw.Models sm = 1;
  bool has_sm() const;
  private:
  bool _internal_has_sm() const;
  public:
  void clear_sm();
  const ::mw::Models& sm() const;
  ::mw::Models* release_sm();
  ::mw::Models* mutable_sm();
  void set_allocated_sm(::mw::Models* sm);
  private:
  const ::mw::Models& _internal_sm() const;
  ::mw::Models* _internal_mutable_sm();
  public:

  // .mw.Models rm = 2;
  bool has_rm() const;
  private:
  bool _internal_has_rm() const;
  public:
  void clear_rm();
  const ::mw::Models& rm() const;
  ::mw::Models* release_rm();
  ::mw::Models* mutable_rm();
  void set_allocated_rm(::mw::Models* rm);
  private:
  const ::mw::Models& _internal_rm() const;
  ::mw::Models* _internal_mutable_rm();
  public:

  // @@protoc_insertion_point(class_scope:mw.Window)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Num > nums_;
  ::mw::Models* sm_;
  ::mw::Models* rm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Model_5fwindow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// int32 x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:mw.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Point::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mw.Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:mw.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Point::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mw.Point.y)
}

// -------------------------------------------------------------------

// Points

// repeated .mw.Point points = 1;
inline int Points::_internal_points_size() const {
  return points_.size();
}
inline int Points::points_size() const {
  return _internal_points_size();
}
inline void Points::clear_points() {
  points_.Clear();
}
inline ::mw::Point* Points::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:mw.Points.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Point >*
Points::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:mw.Points.points)
  return &points_;
}
inline const ::mw::Point& Points::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::mw::Point& Points::points(int index) const {
  // @@protoc_insertion_point(field_get:mw.Points.points)
  return _internal_points(index);
}
inline ::mw::Point* Points::_internal_add_points() {
  return points_.Add();
}
inline ::mw::Point* Points::add_points() {
  // @@protoc_insertion_point(field_add:mw.Points.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Point >&
Points::points() const {
  // @@protoc_insertion_point(field_list:mw.Points.points)
  return points_;
}

// -------------------------------------------------------------------

// Model

// int32 x = 1;
inline void Model::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::x() const {
  // @@protoc_insertion_point(field_get:mw.Model.x)
  return _internal_x();
}
inline void Model::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Model::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mw.Model.x)
}

// int32 y = 2;
inline void Model::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::y() const {
  // @@protoc_insertion_point(field_get:mw.Model.y)
  return _internal_y();
}
inline void Model::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Model::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mw.Model.y)
}

// int32 w = 3;
inline void Model::clear_w() {
  w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::w() const {
  // @@protoc_insertion_point(field_get:mw.Model.w)
  return _internal_w();
}
inline void Model::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  w_ = value;
}
inline void Model::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mw.Model.w)
}

// int32 h = 4;
inline void Model::clear_h() {
  h_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::h() const {
  // @@protoc_insertion_point(field_get:mw.Model.h)
  return _internal_h();
}
inline void Model::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  h_ = value;
}
inline void Model::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:mw.Model.h)
}

// .mw.Points points = 5;
inline bool Model::_internal_has_points() const {
  return this != internal_default_instance() && points_ != nullptr;
}
inline bool Model::has_points() const {
  return _internal_has_points();
}
inline void Model::clear_points() {
  if (GetArenaNoVirtual() == nullptr && points_ != nullptr) {
    delete points_;
  }
  points_ = nullptr;
}
inline const ::mw::Points& Model::_internal_points() const {
  const ::mw::Points* p = points_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mw::Points*>(
      &::mw::_Points_default_instance_);
}
inline const ::mw::Points& Model::points() const {
  // @@protoc_insertion_point(field_get:mw.Model.points)
  return _internal_points();
}
inline ::mw::Points* Model::release_points() {
  // @@protoc_insertion_point(field_release:mw.Model.points)
  
  ::mw::Points* temp = points_;
  points_ = nullptr;
  return temp;
}
inline ::mw::Points* Model::_internal_mutable_points() {
  
  if (points_ == nullptr) {
    auto* p = CreateMaybeMessage<::mw::Points>(GetArenaNoVirtual());
    points_ = p;
  }
  return points_;
}
inline ::mw::Points* Model::mutable_points() {
  // @@protoc_insertion_point(field_mutable:mw.Model.points)
  return _internal_mutable_points();
}
inline void Model::set_allocated_points(::mw::Points* points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete points_;
  }
  if (points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, points, submessage_arena);
    }
    
  } else {
    
  }
  points_ = points;
  // @@protoc_insertion_point(field_set_allocated:mw.Model.points)
}

// int32 points_limit = 6;
inline void Model::clear_points_limit() {
  points_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::_internal_points_limit() const {
  return points_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::points_limit() const {
  // @@protoc_insertion_point(field_get:mw.Model.points_limit)
  return _internal_points_limit();
}
inline void Model::_internal_set_points_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  points_limit_ = value;
}
inline void Model::set_points_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_points_limit(value);
  // @@protoc_insertion_point(field_set:mw.Model.points_limit)
}

// bool is_created = 7;
inline void Model::clear_is_created() {
  is_created_ = false;
}
inline bool Model::_internal_is_created() const {
  return is_created_;
}
inline bool Model::is_created() const {
  // @@protoc_insertion_point(field_get:mw.Model.is_created)
  return _internal_is_created();
}
inline void Model::_internal_set_is_created(bool value) {
  
  is_created_ = value;
}
inline void Model::set_is_created(bool value) {
  _internal_set_is_created(value);
  // @@protoc_insertion_point(field_set:mw.Model.is_created)
}

// bool can_draw = 8;
inline void Model::clear_can_draw() {
  can_draw_ = false;
}
inline bool Model::_internal_can_draw() const {
  return can_draw_;
}
inline bool Model::can_draw() const {
  // @@protoc_insertion_point(field_get:mw.Model.can_draw)
  return _internal_can_draw();
}
inline void Model::_internal_set_can_draw(bool value) {
  
  can_draw_ = value;
}
inline void Model::set_can_draw(bool value) {
  _internal_set_can_draw(value);
  // @@protoc_insertion_point(field_set:mw.Model.can_draw)
}

// bool drag_resize = 9;
inline void Model::clear_drag_resize() {
  drag_resize_ = false;
}
inline bool Model::_internal_drag_resize() const {
  return drag_resize_;
}
inline bool Model::drag_resize() const {
  // @@protoc_insertion_point(field_get:mw.Model.drag_resize)
  return _internal_drag_resize();
}
inline void Model::_internal_set_drag_resize(bool value) {
  
  drag_resize_ = value;
}
inline void Model::set_drag_resize(bool value) {
  _internal_set_drag_resize(value);
  // @@protoc_insertion_point(field_set:mw.Model.drag_resize)
}

// int32 drag_idx = 10;
inline void Model::clear_drag_idx() {
  drag_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::_internal_drag_idx() const {
  return drag_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::drag_idx() const {
  // @@protoc_insertion_point(field_get:mw.Model.drag_idx)
  return _internal_drag_idx();
}
inline void Model::_internal_set_drag_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drag_idx_ = value;
}
inline void Model::set_drag_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drag_idx(value);
  // @@protoc_insertion_point(field_set:mw.Model.drag_idx)
}

// int32 line_color = 11;
inline void Model::clear_line_color() {
  line_color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::_internal_line_color() const {
  return line_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::line_color() const {
  // @@protoc_insertion_point(field_get:mw.Model.line_color)
  return _internal_line_color();
}
inline void Model::_internal_set_line_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_color_ = value;
}
inline void Model::set_line_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line_color(value);
  // @@protoc_insertion_point(field_set:mw.Model.line_color)
}

// int32 line_style = 12;
inline void Model::clear_line_style() {
  line_style_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::_internal_line_style() const {
  return line_style_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::line_style() const {
  // @@protoc_insertion_point(field_get:mw.Model.line_style)
  return _internal_line_style();
}
inline void Model::_internal_set_line_style(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_style_ = value;
}
inline void Model::set_line_style(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line_style(value);
  // @@protoc_insertion_point(field_set:mw.Model.line_style)
}

// bool is_focused = 13;
inline void Model::clear_is_focused() {
  is_focused_ = false;
}
inline bool Model::_internal_is_focused() const {
  return is_focused_;
}
inline bool Model::is_focused() const {
  // @@protoc_insertion_point(field_get:mw.Model.is_focused)
  return _internal_is_focused();
}
inline void Model::_internal_set_is_focused(bool value) {
  
  is_focused_ = value;
}
inline void Model::set_is_focused(bool value) {
  _internal_set_is_focused(value);
  // @@protoc_insertion_point(field_set:mw.Model.is_focused)
}

// int32 shape_id = 14;
inline void Model::clear_shape_id() {
  shape_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::_internal_shape_id() const {
  return shape_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model::shape_id() const {
  // @@protoc_insertion_point(field_get:mw.Model.shape_id)
  return _internal_shape_id();
}
inline void Model::_internal_set_shape_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shape_id_ = value;
}
inline void Model::set_shape_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shape_id(value);
  // @@protoc_insertion_point(field_set:mw.Model.shape_id)
}

// -------------------------------------------------------------------

// Models

// repeated .mw.Model models = 1;
inline int Models::_internal_models_size() const {
  return models_.size();
}
inline int Models::models_size() const {
  return _internal_models_size();
}
inline void Models::clear_models() {
  models_.Clear();
}
inline ::mw::Model* Models::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:mw.Models.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Model >*
Models::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:mw.Models.models)
  return &models_;
}
inline const ::mw::Model& Models::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::mw::Model& Models::models(int index) const {
  // @@protoc_insertion_point(field_get:mw.Models.models)
  return _internal_models(index);
}
inline ::mw::Model* Models::_internal_add_models() {
  return models_.Add();
}
inline ::mw::Model* Models::add_models() {
  // @@protoc_insertion_point(field_add:mw.Models.models)
  return _internal_add_models();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Model >&
Models::models() const {
  // @@protoc_insertion_point(field_list:mw.Models.models)
  return models_;
}

// -------------------------------------------------------------------

// Num

// int32 num = 1;
inline void Num::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Num::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Num::num() const {
  // @@protoc_insertion_point(field_get:mw.Num.num)
  return _internal_num();
}
inline void Num::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void Num::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:mw.Num.num)
}

// -------------------------------------------------------------------

// Window

// .mw.Models sm = 1;
inline bool Window::_internal_has_sm() const {
  return this != internal_default_instance() && sm_ != nullptr;
}
inline bool Window::has_sm() const {
  return _internal_has_sm();
}
inline void Window::clear_sm() {
  if (GetArenaNoVirtual() == nullptr && sm_ != nullptr) {
    delete sm_;
  }
  sm_ = nullptr;
}
inline const ::mw::Models& Window::_internal_sm() const {
  const ::mw::Models* p = sm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mw::Models*>(
      &::mw::_Models_default_instance_);
}
inline const ::mw::Models& Window::sm() const {
  // @@protoc_insertion_point(field_get:mw.Window.sm)
  return _internal_sm();
}
inline ::mw::Models* Window::release_sm() {
  // @@protoc_insertion_point(field_release:mw.Window.sm)
  
  ::mw::Models* temp = sm_;
  sm_ = nullptr;
  return temp;
}
inline ::mw::Models* Window::_internal_mutable_sm() {
  
  if (sm_ == nullptr) {
    auto* p = CreateMaybeMessage<::mw::Models>(GetArenaNoVirtual());
    sm_ = p;
  }
  return sm_;
}
inline ::mw::Models* Window::mutable_sm() {
  // @@protoc_insertion_point(field_mutable:mw.Window.sm)
  return _internal_mutable_sm();
}
inline void Window::set_allocated_sm(::mw::Models* sm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sm_;
  }
  if (sm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sm, submessage_arena);
    }
    
  } else {
    
  }
  sm_ = sm;
  // @@protoc_insertion_point(field_set_allocated:mw.Window.sm)
}

// .mw.Models rm = 2;
inline bool Window::_internal_has_rm() const {
  return this != internal_default_instance() && rm_ != nullptr;
}
inline bool Window::has_rm() const {
  return _internal_has_rm();
}
inline void Window::clear_rm() {
  if (GetArenaNoVirtual() == nullptr && rm_ != nullptr) {
    delete rm_;
  }
  rm_ = nullptr;
}
inline const ::mw::Models& Window::_internal_rm() const {
  const ::mw::Models* p = rm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mw::Models*>(
      &::mw::_Models_default_instance_);
}
inline const ::mw::Models& Window::rm() const {
  // @@protoc_insertion_point(field_get:mw.Window.rm)
  return _internal_rm();
}
inline ::mw::Models* Window::release_rm() {
  // @@protoc_insertion_point(field_release:mw.Window.rm)
  
  ::mw::Models* temp = rm_;
  rm_ = nullptr;
  return temp;
}
inline ::mw::Models* Window::_internal_mutable_rm() {
  
  if (rm_ == nullptr) {
    auto* p = CreateMaybeMessage<::mw::Models>(GetArenaNoVirtual());
    rm_ = p;
  }
  return rm_;
}
inline ::mw::Models* Window::mutable_rm() {
  // @@protoc_insertion_point(field_mutable:mw.Window.rm)
  return _internal_mutable_rm();
}
inline void Window::set_allocated_rm(::mw::Models* rm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rm_;
  }
  if (rm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rm, submessage_arena);
    }
    
  } else {
    
  }
  rm_ = rm;
  // @@protoc_insertion_point(field_set_allocated:mw.Window.rm)
}

// repeated .mw.Num nums = 3;
inline int Window::_internal_nums_size() const {
  return nums_.size();
}
inline int Window::nums_size() const {
  return _internal_nums_size();
}
inline void Window::clear_nums() {
  nums_.Clear();
}
inline ::mw::Num* Window::mutable_nums(int index) {
  // @@protoc_insertion_point(field_mutable:mw.Window.nums)
  return nums_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Num >*
Window::mutable_nums() {
  // @@protoc_insertion_point(field_mutable_list:mw.Window.nums)
  return &nums_;
}
inline const ::mw::Num& Window::_internal_nums(int index) const {
  return nums_.Get(index);
}
inline const ::mw::Num& Window::nums(int index) const {
  // @@protoc_insertion_point(field_get:mw.Window.nums)
  return _internal_nums(index);
}
inline ::mw::Num* Window::_internal_add_nums() {
  return nums_.Add();
}
inline ::mw::Num* Window::add_nums() {
  // @@protoc_insertion_point(field_add:mw.Window.nums)
  return _internal_add_nums();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mw::Num >&
Window::nums() const {
  // @@protoc_insertion_point(field_list:mw.Window.nums)
  return nums_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mw

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mw::Window_Shapes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mw::Window_Shapes>() {
  return ::mw::Window_Shapes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Model_5fwindow_2eproto
